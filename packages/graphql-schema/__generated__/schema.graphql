# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AnimalBreed {
  id: String!
  name: String!
  other: Boolean!
}

type AnimalType {
  code: String!
  name: String
}

type AnimalUniverse {
  id: String!
  name: String!
  species: String!
}

type Country {
  name: String!
  code: String!
  order: String
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type Deal {
  ref: String!
  name: String
  type: String
  redeem_days: [String!]
  is_locked: Boolean
  partner_visibility: String
  restrict_registration: Boolean
  image_url: String
  postal_address_required: Boolean
  optin_options: [DealOptionOptions!]
  display_on_terminal: Float
  redeem_duration_value: Float
  redeem_duration_unit: String
  is_relative_redeem_dates: Boolean
  google_tracking_id: String
  status: String
  referrer_required: Float
  pet_required: String
  pet_type: String
  pet_universe: String
  pet_breed: [AnimalBreed!]
  pet_age_limit_value: String
  pet_age_limit_unit: String
  pet_age_limit_operator: String
  pet_age_limit_to_value: String
  pet_age_limit_to_unit: String
  send_voucher_email: Boolean
  send_voucher_sms: Boolean
  need_to_scan: Float
  available_from: String
  available_to: String
  redeem_validity_from: String
  redeem_validity_to: String
  validity_message: String
  confirmation_text: String
  description: String
  slogan: String
  public_name: String
  site_footer: String
  voucher_small_print: String
  redemption_confirmation_text: String
  redirect_url: String
  langs: [String!]
  logo_url: String
  css_file_url: String
  internal_barcode: String
  presentation_images: DealPresentationImages
  subscription_count: DealSubscriptionCount
  saving_end_time_value: String
  saving_end_time_unit: String
  saving_end_date: String
  allowed_partner_groups: [String!]
  excluded_partner_groups: [String!]
  deal_groups: [String!]
  products: [DealProduct!]
  type_details: DealTypeDetails
}

type DealAmounts {
  EUR: Float
}

type DealOptionOptions {
  id: String!
  visible: String!
  default_value: String!
  can_change: String!
}

type DealPresentationImages {
  small: DealStringByLang!
  large: DealStringByLang!
}

type DealProduct {
  ean: String!
  id: String!
  label: String!
  friendly_name: String
  min_qty: Float!
  collectionReference: String
  collection(lang: String!): ProductCollectionDetail
}

type DealStringByLang {
  FR: String
  NL: String
  EN: String
  forLocale: String
}

input DealSubscribeInput {
  ref: String!
  partner_extid: String
  ean_code: String
  secure_code: String
  pet_guid: String
  iban: String
  bic: String
  referral_code: String
  referral_code_type: String
  delivery_address_id: String
  child_guid: String
}

type DealSubscriptionCount {
  REDEEMED: Float!
  SUBSCRIBED: Float!
  IN_PROGRESS: Float!
}

type DealTypeDetails {
  discount_type: String!
  amounts: DealAmounts!
}

type DealVisiblePartnerForUserResult {
  pageInfo: PageInfo!
  result: [DealVisiblePartnerForUserResultData!]!
}

type DealVisiblePartnerForUserResultData {
  id: String!
  extid: String!
  name: String!
  street1: String
  street2: String
  streetnum: String
  postal_code: String
  city: String
  region: String
  country: String
  lat: Float
  lng: Float
}

type DirectCashbackDealDetail {
  id: String!
  ref: String!
  redeemDurationValue: Float
  redeemDurationUnit: String
  isRelativeRedeemDate: Boolean
  status: String!
  publicName: String
  availableFrom: DateTime
  availableTo: DateTime
  slogan: String
  redeemValidityFrom: DateTime
  redeemValidityTo: DateTime
  siteFooter: String
  presentationImages: DirectCashbackDealDetailImages
  petRequired: Boolean!
}

type DirectCashbackDealDetailImages {
  small: LanguageObject
  large: LanguageObject
}

input DirectCashbackDealSubscribeInput {
  ref: String!
  pet_guid: String
  child_guid: String
}

type DirectCashbackRedemptionRequest {
  id: String!
  user_guid: String!
  imageUrl: String!
  benefitId: String!
  barcode: String!
  status: String!
  iban: String!
  bic: String
  createdOn: DateTime!
  updatedOn: DateTime!
  deal_ref: String!
  voucher: DirectCashbackVoucherDetail!
  statusMessage(lang: String!): String
}

type DirectCashbackRedemptionRequestConnection {
  pageInfo: PageInfo!
  result: [DirectCashbackRedemptionRequest!]!
}

type DirectCashbackRedemptionRequestCreateResult {
  error: GenericValidationError
  result: DirectCashbackRedemptionRequestURL
}

input DirectCashbackRedemptionRequestInput {
  barcode: String!
  benefitId: String
  receiptDate: String!
  receiptImageMimeType: String!
  targetCurrency: String!
  paymentDetails: DirectCashbackRedemptionRequestInputPayementDetail!
  eanBarcode: String
  partnerExtId: String
}

input DirectCashbackRedemptionRequestInputPayementDetail {
  iban: String
  sortCode: String
  accountNumber: String
}

type DirectCashbackRedemptionRequestURL {
  """URL to upload the ticket image"""
  url: String!
}

type DirectCashbackVoucherBenefit {
  id: String!
  productId: String
  amount: String
  currency: String
}

type DirectCashbackVoucherConnection {
  pageInfo: PageInfo!
  result: [DirectCashbackVoucherDetail!]!
}

type DirectCashbackVoucherDealDetail {
  id: String!
  ref: String!
  redeemDurationValue: Float
  redeemDurationUnit: String
  isRelativeRedeemDate: Boolean
  status: String!
  publicName: String
  availableFrom: DateTime
  availableTo: DateTime
  slogan: String
  redeemValidityFrom: DateTime
  redeemValidityTo: DateTime
  siteFooter: String
  presentationImages: DirectCashbackDealDetailImages
  petRequired: Boolean!
  benefits: [DirectCashbackVoucherBenefit!]!
}

type DirectCashbackVoucherDetail {
  id: String!
  user_guid: String!
  barcode: String
  status: String!
  pet_guid: String
  activeRedemptionRequestStatus: String
  redeemValidityFrom: DateTime
  redeemValidityTo: DateTime
  benefit: DirectCashbackVoucherBenefit
  deal: DirectCashbackVoucherDealDetail!
}

type FieldValidationError {
  field: String!
  errors: [ValidationError!]!
}

type GenericError {
  message: String!
  code: String!
}

type GenericValidationError {
  message: String!
  code: String!
  validationErrors: [FieldValidationError!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type Language {
  name: String
  code: String!
}

type LanguageObject {
  FR: String
  NL: String
}

type LegalForm {
  code: String!
  name: String!
  description: String
  forget_on_revoke: Boolean!
  url: String
}

type LoyaltyBalance {
  user_total_points: String!
  user_guid: String!
  user_hold_points: String!
  status: String!
}

type Mutation {
  dealSubscribe(input: DealSubscribeInput!, token: String!): GenericValidationError
  userRecoverPassword(email: String!): GenericError
  userUpdateRecoveredPassword(password: String!, token: String!): GenericValidationError
  userConfirmLegalForms(confirmLegalFormsInput: UserConfirmLegalFormsInput!, token: String!): GenericValidationError
  userUpdateSubscriptions(updateSubscriptionsInput: UserUpdateSubscriptionsInput!, token: String!): GenericValidationError
  userUpdatePlacesOfPurchase(updatePlacesOfPurchaseInput: UserUpdatePlacesOfPurchaseInput!, token: String!): GenericValidationError
  userConfirmAccount(token: String!): GenericError
  userDeleteSelf(token: String!): GenericError
  userAddressCreate(userAddressInput: UserAddressCreateInput!, token: String!): UserAddressUpdateResult!
  userAddressUpdate(userAddressInput: UserAddressUpdateInput!, token: String!): UserAddressUpdateResult!
  userCreate(userInput: UserCreateInput!): UserUpdateResult!
  userPetCreate(userPetInput: UserPetCreateInput!, token: String!): UserPetUpdateResult!
  userPetDelete(userPetDeleteInput: UserPetDeleteInput!, token: String!): UserResult!
  userPetUpdate(userPetInput: UserPetUpdateInput!, token: String!): UserPetUpdateResult!
  userUpdate(userInput: UserUpdateInput!, token: String!): UserUpdateResult!
  userChildUpdate(userChildUpdateInput: UserChildUpdateInput!, token: String!): UserChildResult!
  userChildCreate(userChildCreateInput: UserChildCreateInput!, token: String!): UserChildResult!
  userFavouritesCreate(userFavouritesCreateInput: UserFavouritesCreateInput!, token: String!): UserFavouritesResult!
  userFavouritesDelete(id: String!, token: String!): UserFavouritesResult!
  directCashbackDealSubscribe(input: DirectCashbackDealSubscribeInput!, token: String!): GenericValidationError
  directCashbackRedemptionRequestCreate(input: DirectCashbackRedemptionRequestInput!, token: String!): DirectCashbackRedemptionRequestCreateResult
  userPartnerRelationCreate(userPartnerInput: UserPartnerRelationCreateInput!, token: String!): UserPartnerUpdateResult!
  userPartnerRelationDelete(userPartnerInput: UserPartnerRelationDeleteInput!, token: String!): UserPartnerUpdateResult!
}

type PageInfo {
  hasNextPage: Boolean!
  count: Float!
  page: Float!

  """Paginate limit"""
  limit: Float
}

type Partner {
  extId: String!
  street1: String
  streetnum: String
  postalCode: String
  city: String
  country: String
  email: String
  phone: String
  name: String
  lat: String
  lng: String
  type: String
  website: String
  partnerGroups: [String!]
  logo: PartnerLogo!
}

type PartnerConnection {
  pageInfo: PageInfo!
  result: [PartnerListItem!]!
}

type PartnerListItem {
  extId: String!
  type: String!
  pubName: String!
  street1: String
  streetnum: String
  postalCode: String
  city: String
  country: String
}

input PartnerListItemInput {
  type: [String!]
  groupHandle: [String!]
}

input PartnerLocatorInput {
  lat: String!
  lng: String!
  type: String
  radius: Float
  limit: Float
  collectionRef: String
  partner_group_handle: [String!]
  excl_partner_group_handle: [String!]
  stock_level: Float
  search_term: String
  partner_status: String
}

type PartnerLogo {
  default: String
  small: String
  medium: String
  large: String
}

type PartnerRelation {
  code: String!
  name: String!
}

type PartnerType {
  code: String!
  name: String!
}

type PlaceOfPurchase {
  name: String!
  code: String!
}

type ProductCollectionDetail {
  reference: String!
  name: String
  description: String
  tagLine: String
  introduction: String
  image: String
  imageSmall: String
  imageMedium: String
  imageLarge: String
  benefits: [ProductCollectionDetailBenefits!]
  keyBenefits: [String!]
  links: [ProductCollectionLinks!]
  energy_level: Float! @deprecated(reason: "old field nomenclature")
  has_image: Boolean! @deprecated(reason: "old field nomenclature")
  collection_reference: String! @deprecated(reason: "old field nomenclature")
  collection_generic_name: String! @deprecated(reason: "old field nomenclature")
  collection_name: String! @deprecated(reason: "old field nomenclature")
  collection_description: String! @deprecated(reason: "old field nomenclature")
  collection_tag_line: String! @deprecated(reason: "old field nomenclature")
  collection_introduction: String! @deprecated(reason: "old field nomenclature")
  collection_range_reference: String! @deprecated(reason: "old field nomenclature")
  collection_range_family_reference: String! @deprecated(reason: "old field nomenclature")
  collection_energy_level: Float! @deprecated(reason: "old field nomenclature")
  collection_image: String
  collection_image_small: String
  collection_image_medium: String
  collection_image_large: String
}

type ProductCollectionDetailBenefits {
  id: String!
  title: String
  description: String
  image: String
}

type ProductCollectionLinks {
  type: String
  reference: String
  link: String
}

type ProductCollectionPetRation {
  debug: ProductCollectionPetRationDebug!
  energyValue: Float!
  rationValue: Float!
  energyValueUnit: String!
  rationValueUnit: String!
  approximationCodes: [String!]!
  rationInCupsPerDay: String!
}

type ProductCollectionPetRationDebug {
  exponent: Float!
  constant: Float!
}

input ProductCollectionPetRationInput {
  pet_guid: String!
  pet_weight: String
  pet_predicted_adult_weight: String
  pet_bcs: String
  energy_level: String
  collection_reference: String
  language: String
}

type ProductCollectionsByPetGUID {
  reference: String
  name: String
  description: String
  tagLine: String
  introduction: String
  image: String
  imageSmall: String
  imageMedium: String
  imageLarge: String
  links: [ProductCollectionLinks!]
}

input ProductCollectionsByPetGUIDInput {
  pet_guid: String!
  user_guid: String
  partner_id: String
  partner_id_type: String
  partner_group_handle: String
  language: String
  add_clientof_partner_groups: String
  use_https_urls: String
  apply_range_exlusions: String
  data_options: [String!]
  is_gestation: String
  sort_order: String
  component_sort_order: String
  ignore_old_format: String
}

type ProductCollectionsByTargetingInfoCollection {
  reference: String!
  generic_name: String!
  name: String!
  energy_level: Float!
  has_image: Boolean!
  description: String!
  tag_line: String!
  introduction: String!
  id: String!
  score: Float!
  secondary_sorting_weight: String!
  range_priority_order: String!
  max_score: Float!
  pf_tracking_reference: String!
  criteria_source_reference: String
  images: ProductCollectionsByTargetingInfoCollectionImages
}

type ProductCollectionsByTargetingInfoCollectionImages {
  image: String!
  image_small: String!
  image_medium: String!
  image_large: String!
}

input ProductCollectionsByTargetingInfoFilterByAllInput {
  filter_type: String!
  species_type: String
  univers: String
  breed: String
  neutered: String
  gender: String
  purchase_place: String
  unit: String
  age: String
  age_from: String
  age_to: String
  range_reference: String
  pet_bcs: Float
  pet_weight: String
  pet_stages: [String!]
  public_visibility: String
  partners_visibility: String
  partner_types: [String!]
  pet_allergens: [String!]
  pet_health_context: [String!]
}

input ProductCollectionsByTargetingInfoInput {
  partner_id: String
  partner_id_type: String
  deal_reference: String
  partner_group_handle: String
  pet_guid: String
  user_guid: String
  diagnostic_codes: String
  filter_by_all: [ProductCollectionsByTargetingInfoFilterByAllInput!]
  filter_type: String
  species_type: String
  univers: String
  breed: String
  neutered: String
  gender: String
  purchase_place: String
  unit: String
  age: String
  age_from: String
  age_to: String
  dob: String
  pathologies: String
  lifestyle: String
  operator: String
  range_reference: String
  pet_weight: String
  pet_bcs: String
  pet_stages: String
  partners_visibility: String
  public_visibility: String
  partner_types: String
  pet_allergens: String
  pet_health_context: String
  language: String
  use_https_urls: String
  show_ration: String
  apply_range_exlusions: String
  data_options: [String!]
  ration_predicted_weight: String
}

input ProductCollectionsDetailInput {
  collectionReference: String!
  language: String!
  useHttpUrls: Boolean
  dataOptions: [String!]
  componentSortOrder: String
  ignoreOld_Format: String
}

type Query {
  metadataLegalForms(codes: String, lang: String): [LegalForm!]!
  metadataAnimalBreeds(type: String, lang: String): [AnimalBreed!]!
  metadataAnimalTypes(lang: String): [AnimalType!]!
  metadataAnimalUniverses(lang: String): [AnimalUniverse!]!
  metadataCountries(lang: String): [Country!]!
  metadataPlaceOfPurchase(lang: String): [PlaceOfPurchase!]!
  metadataLanguages(lang: String): [Language!]!
  metadataSubscriptions(lang: String): [Subscription!]!
  metadataUserTitles(lang: String): [UserTitle!]!
  metadataPartnerRelationTypes: [PartnerRelation!]!
  dealProducts(deal_ref: String!): [DealProduct!]
  dealCheckSecureCode(code: String!, deal_ref: String!): GenericValidationError
  dealVisiblePartnerForUser(
    """Paginate limit"""
    limit: Float
    page: Float
    deal_ref: String!
    search: String
    favorite_only: Boolean
    partner_lat: Float
    partner_lng: Float
    radius: Float
    token: String!
  ): DealVisiblePartnerForUserResult
  deal(default_lang: String, deal_ref: String!): Deal
  productCollectionsByTargetingInfo(input: ProductCollectionsByTargetingInfoInput!): [ProductCollectionsByTargetingInfoCollection!]
  productCollectionsByPetGUID(token: String!, input: ProductCollectionsByPetGUIDInput!): [ProductCollectionsByPetGUID!]
  productCollectionPetRation(token: String!, input: ProductCollectionPetRationInput!): ProductCollectionPetRation
  productCollectionDetail(token: String!, input: ProductCollectionsDetailInput!): ProductCollectionDetail
  user(token: String!): UserResult
  userLogin(userContextData: JSON, password: String!, identifier: String!): UserResult!
  userLoginByAccessToken(userContextData: JSON, access_token: String!): UserResult!
  userLoginByPublicToken(userContextData: JSON, token: String!): UserResult!
  userEmailExists(email: String!): Boolean!
  userCreateAuthCode(ttl: Float!, value: String!, type: String!): GenericError
  userLoginByCode(auth_code: String!): UserResult
  userCheckPasswordTokenValidity(token: String!): Boolean
  findPartners(partnerLocatorInput: PartnerLocatorInput!): [Partner!]
  loyaltyRetrieveBalance(card_program_id: String, program_id: String!, token: String!): LoyaltyBalance!
  directCashbackDealDetail(ref: String!): DirectCashbackDealDetail
  directCashbackDealListEligible(token: String!): [DirectCashbackDealDetail!]!
  directCashbackDealListEligiblePets(deal_ref: String!, token: String!): [UserPet!]!
  directCashbackRedemptionRequestList(
    """Paginate limit"""
    limit: Float
    page: Float
    status: String
    barcode: String
    sortField: String
    sortOrder: String
    token: String!
  ): DirectCashbackRedemptionRequestConnection!
  directCashbackVoucherList(
    """Paginate limit"""
    limit: Float
    page: Float
    pet_guid: String
    child_guid: String
    from: String
    to: String
    ref: String
    token: String!
  ): DirectCashbackVoucherConnection
  directCashbackVoucherDetail(deal_data_options: [String!], barcode: String!, token: String!): DirectCashbackVoucherDetail
  metadataPartnerTypes(lang: String): [PartnerType!]!
  partnerList(
    partnerListInput: PartnerListItemInput

    """Paginate limit"""
    limit: Float
    page: Float
  ): PartnerConnection
  partnerDetails(partner_ext_id: String!): [Partner!]
}

type Subscription {
  code: String!
  name: String!
  type: String!
}

type User {
  owner: UserOwner!
  token: String!
  pets(dealRef: String, locale: String): [UserPet!]!
  addresses: [UserAddress!]!
  preferences: UserPreferences!
  legalForms(codes: [String!]): UserLegalForms!
  partners(showInactivePartners: Boolean): UserPartnerRelations!
  placesOfPurchase: [UserPlaceOfPurchase!]!
  children: [UserChild!]!
  segments: [UserSegment!]!
  favourites(type: String, source: String): [UserFavourites!]!
}

type UserAddress {
  id: Float!
  name: String
  phone: String
  streetnum: String
  street1: String
  street2: String
  postalCode: String
  city: String
  country: String
  isDefault: Boolean!
}

input UserAddressCreateInput {
  name: String
  streetnum: String
  street1: String
  street2: String
  postalCode: String!
  city: String!
  country: String
}

input UserAddressUpdateInput {
  name: String
  streetnum: String
  street1: String
  street2: String
  postalCode: String!
  city: String!
  country: String
  id: String!
}

type UserAddressUpdateResult {
  error: GenericValidationError
  result: UserAndAddress
}

type UserAndAddress {
  user: User!
  address: UserAddress!
}

type UserAndChild {
  user: User!
  child: UserChild!
}

type UserAndFavourites {
  user: User!
}

type UserAndPartner {
  user: User!
}

type UserAndPet {
  user: User!
  pet: UserPet!
}

type UserBreedDetail {
  name: String!
  universeId: String!
}

type UserChild {
  birthday: DateTime
  gender: String!
  guid: String!
  firstName: String!
}

input UserChildCreateInput {
  firstName: String!
  birthday: String!
  gender: String!
  extId: String
}

type UserChildResult {
  error: GenericValidationError
  result: UserAndChild
}

input UserChildUpdateInput {
  guid: String!
  firstName: String
  birthday: String
  gender: String
  extId: String
}

input UserConfirmLegalFormsInput {
  legal_form_code: [String!]!
  confirmed_place: String!
  send_notification: String
  signature: String
}

input UserCreateInput {
  title: String
  firstName: String
  lastName: String
  dob: String
  gender: String
  telephone: String
  mobilePhone: String
  email: String
  password: String
  language: String
  country: String
  originDetails: String
  postalCode: String
  city: String
}

type UserFavourites {
  id: String!
  date: String!
  type: String!
  content: String!
  source: String!
}

input UserFavouritesCreateInput {
  date: DateTime!
  type: String!
  content: String!
  source: String!
}

type UserFavouritesResult {
  error: GenericValidationError
  result: UserAndFavourites
}

type UserLegalForms {
  confirmed: Boolean!
  items(lang: String): [UserLegalFormsItems!]!
}

type UserLegalFormsItems {
  legalForm: LegalForm!
  confirmed: Boolean!
}

type UserOwner {
  guid: String!
  firstName: String
  lastName: String
  email: String
  title: String
  dob: String
  gender: String
  mobilePhone: String
  language: String
  country: String
  postalCode: String
  confirmed: Boolean!
  customerGroup: String
  type: [String!]
}

type UserPartnerRelation {
  extId: String!
  type: String!
  roles: [String!]!
  partner: Partner!
}

input UserPartnerRelationCreateInput {
  extId: String!
  relationship: String!
  roles: String!
  status: String!
}

input UserPartnerRelationDeleteInput {
  extId: String!
  relationship: String!
}

type UserPartnerRelations {
  partof: [UserPartnerRelation!]!
  clientof: [UserPartnerRelation!]!
}

type UserPartnerUpdateResult {
  error: GenericValidationError
  result: UserAndPartner
}

type UserPet {
  name: String!
  guid: String!
  dob: String
  gender: String
  neutered: Boolean!
  type: String!
  breed: String!
  profileCompletion: Float!
  declarativeProduct: String
  breedDetails: UserBreedDetail!
  hasPicture: Boolean!
  lastUpdated: DateTime
  lifeStyle: String
  pictureUrl: String!
  placeOfPurchase: [UserPetPlaceOfPurchase!]!
  weightSeries: [UserPetWeight!]!
  bmiSeries: [UserPetBmi!]!
}

type UserPetBmi {
  bmi: String!
  date: String!
}

input UserPetBmiEntry {
  date: String!
  bmi: Float!
  partner_ext_id: String
  source: String!
}

input UserPetCreateInput {
  name: String!
  type: String!
  breed: String!
  dob: String!
  neutered: Boolean
  gender: String
  pictureUrl: String
  placeOfPurchase: String
  bmi: UserPetBmiEntry
  weight: UserPetWeightEntry
}

input UserPetDeleteInput {
  guid: String!
  petDeletionCause: String!
}

type UserPetPlaceOfPurchase {
  placeId: String!
  placeRating: String!
  placeRatedOn: DateTime
}

input UserPetUpdateInput {
  guid: String!
  name: String!
  type: String
  breed: String
  dob: String
  gender: String
  neutered: Boolean
  pictureUrl: String
  placeOfPurchase: String
  bmi: UserPetBmiEntry
  weight: UserPetWeightEntry
  lifeStyle: String
  declarativeProduct: String
}

type UserPetUpdateResult {
  error: GenericValidationError
  result: UserAndPet
}

type UserPetWeight {
  weight: String!
}

input UserPetWeightEntry {
  date: String!
  weight: Float!
  partner_ext_id: String
  source: String!
}

type UserPlaceOfPurchase {
  place_id: String!
  place_rating: String!
}

type UserPreferences {
  communicationPreferences: [String!]!
  interests: [String!]!
  subscriptions: [String!]!
}

type UserResult {
  error: GenericError
  result: User
}

type UserSegment {
  id: Float!
  handle: String!
}

type UserTitle {
  code: String!
  name: String!
  gender: String!
}

input UserUpdateInput {
  title: String
  firstName: String
  lastName: String
  dob: String
  gender: String
  telephone: String
  mobilePhone: String
  email: String
  password: String
  language: String
  country: String
  postalCode: String
  city: String
  street1: String
  streetnum: String
}

input UserUpdatePlacesOfPurchaseInput {
  place_id: String!
  place_rating: String
  enabled: Boolean
}

type UserUpdateResult {
  error: GenericValidationError
  result: User
}

input UserUpdateSubscriptionsInput {
  com_prefs: String
  interests: String
  subscriptions: [String!]
}

type ValidationError {
  validator: String!
  message: String!
}
